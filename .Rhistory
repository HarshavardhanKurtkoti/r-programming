melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
library(reshape2)
melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2=decast(df1,variable+month=name,value.var=total)
df2=decast(df1,variable+month<-name,value.var=total)
data=data.frame("SLNO"=c(1,2,3,4),"Name"=c("Robin","Robin","Rohit","Rohit"),"month"=c("jan","feb","jan","feb"),"BP"=c(180,160,90,150),"BS"=c(180,160,140,150))
print(data)
library(reshape2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2=decast(df1,variable+month<-name,value.var=total)
library(reshape2)
df2=decast(df1,variable+month<-name,value.var=total)
df2= decast(df1,variable+month<-name,value.var=total)
library(reshape2)
df2= dcast(df1,variable+month<-name,value.var=total)
library(reshape2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
library(reshape2)
df2= dcast(df1,variable+month<-name,value.var=total)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2= dcast(df1,variable+month<-name,value.var=total)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2= dcast(df1,variable+month=name,value.var=total)
library(reshape2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2= decast(df1,variable+month<-name,value.var=total)
library(reshape2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2= dcast(df1,variable+month<-name,value.var=total)
library(reshape2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"),variable.name="Name or month",value.name="BP OR BS")
print(df1)
df2= dcast(df1,variable+month<-name,value.var=total)
data=data.frame("SLNO"=c(1,2,3,4),"Name"=c("Robin","Robin","Rohit","Rohit"),"month"=c("jan","feb","jan","feb"),"BP"=c(180,160,90,150),"BS"=c(180,160,140,150))
print(data)
library(reshape2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"),variable.name="Name_or_month",value.name="BP_OR_BS")
print(df1)
df2= dcast(df1,Name or month+month<-name,value.var=total)
df2= dcast(df1,Name_or_month+month<-name,value.var=total)
library(reshape2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"),variable.name="Name_or_month",value.name="BP_OR_BS")
print(df1)
df2= dcast(df1,Name_or_month+month<-name,value.var=total)
df2= dcast(df1,"Name_or_month+month<-name",value.var=total)
df2= dcast(df1,"Name_or_month+month<-name","value.var=total")
df2= dcast(df1,Name_or_month+month<-name,value.var=total)
df2= dcast(df1,Name_or_month+month~name,value.var=total)
df2= dcast(df1,Name_or_month+month~name,value.var~total)
df2= dcast(df1,Name_or_month+month~name,BP_OR_BS.var=total)
df2= dcast(df1,Name_or_month+month~name,BP_OR_BS.var=BP_OR_BS)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2= dcast(df1,Name_or_month+month~name,BP_OR_BS.var=BP_OR_BS)
df2= dcast(df1,variable+month~name,value.vars=value)
df2= dcast(df1,variable+month~name,value.vars="value")
df2= dcast(df1,variable+month~Name,value.var="value")
print(df2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2= dcast(df1,variable+month~Name,value.var="value")
print(df2)
df=recast(data,variable+month=Name.Id.var=c("Name","month"),measure.var=c("BP","BS"))
df=recast(data,variable+month~Name.Id.var=c("Name","month"),measure.var=c("BP","BS"))
df=recast(data,variable+month~Name,Id.var=c("Name","month"),measure.var=c("BP","BS"))
print(df)
df3=mutatae(data,new_bp=BP+10)
df3=mutate(data,new_bp=BP+10)
data=data.frame("SLNO"=c(1,2,3,4),"Name"=c("Robin","Robin","Rohit","Rohit"),"month"=c("jan","feb","jan","feb"),"BP"=c(180,160,90,150),"BS"=c(180,160,140,150))
print(data)
library(reshape2)
df1=melt(data,ID.vars=c("Name","month"),measure.vars=c("BP","BS"))
print(df1)
df2= dcast(df1,variable+month~Name,value.var="value")
print(df2)
df=recast(data,variable+month~Name,Id.var=c("Name","month"),measure.var=c("BP","BS"))
print(df)
df3=mutate(data,new_bp=BP+10)
data=data.frame("SLNO"=c(1,2,3,4),"Name"=c("Robin","Senthil","Rohit","Ramesh"),"month"=c("jan","feb","mar","dec"),"BP"=c(170,162,90,160),"BS"=c(181,150,147,150))
print(data)
data2=data.frame("SLNO"=c(1,2,3,4),"Name"=c("Robin","Senthil","Rohit","Ramesh"),"month"=c("jan","feb","mar","dec"),"BP"=c(170,162,90,160),"BS"=c(181,150,147,150))
print(data2)
pd_left_join=left_join(data,data2,by="BP")
pd_left_join=left.join(data,data2,by="BP")
pd_left_join=left_join(data,data2,by="BP")
pd_left_join<-left_join(data,data2,by="BP")
datadata1
data
data2
install.packages("plyr")
library(plyr)
df3 = mutate(data,new_bp=BP+10)
print(df3)
data2=data.frame("SLNO"=c(1,2,3,4),"Name"=c("Robin","Senthil","Rohit","Ramesh"),"month"=c("jan","feb","mar","dec"),"BP"=c(170,162,90,160),"BS"=c(181,150,147,150))
print(data2)
pd_left_join<-left_join(data,data2,by="BP")
library(dplyr)
pd_left_join<-left_join(data,data2,by="BP")
print(pd_left_join)
pd_right_join<-right_join(data,data2,by="BP")
print(pd_right_join)
pd_full_join<-full_join(data,data2,by="BP")
pd_full_join
library(ggplot2)
#importing the reqd libraries
install.packages("ggplot2")
library(ggplot2)
#importing the reqd libraries
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
#importing the reqd libraries
install.packages("ggplot2")
library(ggplot2)
#importing the reqd libraries
install.packages("ggplot2")
library(ggplot2)
#importing the reqd libraries
install.packages("ggplot2")
library(ggplot2)
#importing the reqd libraries
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
xpos<-1.5
ypos<-xpos**3
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
#importing the reqd libraries
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(ggplot2)
#defining the x and y coordinates
xpos<-1:5
ypos<-xpos**3
#creating a data frame
data_frame<-data.frame(xpos=xpos,ypos=ypos)
#creating a plot
graph<-ggplot(data_frame,aes(xpos,ypos))+geom_point()
#saving the plot as pdf
ggsave("cubegfg.pdf",graph,path="C:/Users/STUDENT")
#defining the x and y coordinates
xpos<-1:5
ypos<-xpos**3
#creating a data frame
data_frame<-data.frame(xpos=xpos,ypos=ypos)
#creating a plot
graph<-ggplot(data_frame,aes(xpos,ypos))+geom_point()
#saving the plot as pdf
ggsave("cubegfg.pdf",graph,path="C:\Users\STUDENT\Desktop")
#defining the x and y coordinates
xpos<-1:5
ypos<-xpos**3
#creating a data frame
data_frame<-data.frame(xpos=xpos,ypos=ypos)
#creating a plot
graph<-ggplot(data_frame,aes(xpos,ypos))+geom_point()
#saving the plot as pdf
ggsave("cubegfg.pdf",graph,path="C:/Users/STUDENT/Desktop")
set.seed(123)#set sed for reproducibility
data<-data.frame(
x=rnorm(100,mean=50,sd=10),#generate ransom data for x
y=rnorm(100,mean=50,sd=10)+0.5*rnorm(100)#generate random data for y
)
cov_value<-cov(data$x,dat$y)
cov_value<-cov(data$x,data$y)
print(paste("covariance:",round(cov_value,2))) #display covariance variable
plot<-ggplot(data,aes(x=x,y=y))+geom_point(color="blue",size=2)+ #plot scatter points
geom_smooth(method="lm",se=FALSE,color="red")+ #add a linear trend line
labs(
title="scatter plot of x vs y",
x="Variable X",
Y="Variable Y",
)+
annoate("text",x=min(datax),y=max(datay),
label=paste("covarience:",round(cov_value,2)),
color="darkred",size=5,hjust=0)+ #annotate covarience
theme_minimal()
#create a scatter plot with ggplot2
plot<-ggplot(data,aes(x=x,y=y))+geom_point(color="blue",size=2)+ #plot scatter points
geom_smooth(method="lm",se=FALSE,color="red")+ #add a linear trend line
labs(
title="scatter plot of x vs y",
x="Variable X",
Y="Variable Y",
)+
annotate("text",x=min(datax),y=max(datay),
label=paste("covarience:",round(cov_value,2)),
color="darkred",size=5,hjust=0)+ #annotate covarience
theme_minimal()
plot<-ggplot(data,aes(x=x,y=y))+geom_point(color="blue",size=2)+ #plot scatter points
geom_smooth(method="lm",se=FALSE,color="red")+ #add a linear trend line
labs(
title="scatter plot of x vs y",
x="Variable X",
Y="Variable Y",
)+
annotate("text",x=min(data$x),y=max(data$y),
label=paste("covarience:",round(cov_value,2)),
color="darkred",size=5,hjust=0)+ #annotate covarience
theme_minimal()
print(plot)
setwd("C:/Users/STUDENT/Documents/20221ist0101")
# load the data
sales_data=read.csv("sales_data.csv")
#Data exploration
library(dplyr)
#check the data structure
str(sales_data)
#summary statistics
summary(sales_data)
#check the missing values
summarize_all(sales_data,~sum(is.na(.)))
#remove rows with missing values
sales_data<-sales_data %>%
na.omit()
sales_data<-distinct(sales_data)
#check the clean data
summary(sales_data)
#Apply Min-Max scaling(Normalization to a range of[0,1])
cal_data<-sales_data$price
min(cal_data)
max(cal_data)
min_max<-(cal_data-mean(cal_data))/(max(cal_data)-min(cal_data))
min_max
mean(cal_data)
sd(cal_data)
#Apply Z-score Normalization (Standardization with mean=0 and std=1) and display the output
z_score<-cal_data-mean(cal_data)/sd(cal_data)
z_score
median(cal_data)
sales_data
sales_data
sales_data <- READ.CSV("sales_data.csv")
sales_data <- READ.CSV("sales_data.csv")
sales_data <- read.csv("sales_data.csv")
# load the data
sales_data=read.csv("sales_data.csv")
#Data exploration
library(dplyr)
#check the data structure
str(sales_data)
#summary statistics
summary(sales_data)
#check the missing values
summarize_all(sales_data,~sum(is.na(.)))
#remove rows with missing values
sales_data<-sales_data %>%
na.omit()
sales_data<-distinct(sales_data)
#check the clean data
summary(sales_data)
total_revenue_by_product <- sales_data %>%
group_by(product) %>%
summarise(total_revenue_by_product = sum(revenue))
View(total_revenue_by_product)
total_revenue_by_product
total_revenue <- sales_data %>% summarise(sum(revenue))
total_revenue
#calculate the total revenue
total_revenue <- sales_data %>% summarise(sum(revenue))
total_revenue
#calculate the revenue by group
total_revenue_by_product <- sales_data %>%
group_by(product) %>%
summarise(total_revenue_by_product = sum(revenue))
total_revenue_by_product
highest <- sales_data %>%
summarise(max(total_revenue_by_product))
highest <- sales_data %>%
summarise(max(total_revenue_by_product$revenue))
highest <- sales_data %>%
summarise(max(revenue))
highest
highest_revenue <- total_revenue_by_product %>%
filter(total_revenue_by_product == max(total_revenue_by_product))
highest_revenue
#Find the product with the highest revenue
average_revenue <- total_revenue_by_product %>%
summerise(average_revenue = mean(total_revenue_by_product$revenue))
#Find the product with the highest revenue
average_revenue <- total_revenue_by_product %>%
summarise(average_revenue = mean(total_revenue_by_product$revenue))
#Find the product with the highest revenue
average_revenue <- total_revenue_by_product %>%
summarise(average_revenue = mean(revenue))
#Find the product with the highest revenue
average_revenue <- total_revenue_by_product %>%
summarise(average_revenue = mean(revenue na.rm = TRUE))
#Find the product with the highest revenue
average_revenue <- total_revenue_by_product %>%
summarise(average_revenue = mean(revenue, na.rm = TRUE))
#Find the product with the highest revenue
average_price <- sales_data %>%
summarise(average_price = mean(price, na.rm = TRUE))
average_price
#Find the product with the highest revenue
average_price <- sales_data %>%
summarise(average_price = mean(price))
average_price
View(sales_data)
#What was the total quantity of products sold by the company?
unique_products <- sales_data %>%
summarise(unique_products = unique(prodeucts))
#What was the total quantity of products sold by the company?
total_quantity_sold <- sales_data %>%
summarise(total_quantity_sold = sum(quantity))
total_quantity_sold
highest_revenue_category
#Which category had the highest revenue? How much revenue did it generate?
highest_revenue_category <- total_revenue_by_category %>%
filter(total_revenue == max(total_revenue))
highest_revenue_category
#Which category had the highest revenue? How much revenue did it generate?
highest_revenue_category <- total_revenue_by_category %>%
filter(total_revenue == max(total_revenue))
#Which category had the highest revenue? How much revenue did it generate?
highest_revenue_category <- sales_data%
# Calculate the total revenue by category
total_revenue_by_category <- sales_data %>%
group_by(category) %>%
summarise(total_revenue = sum(revenue, na.rm = TRUE))
# Find the category with the highest revenue
highest_revenue_category <- total_revenue_by_category %>%
filter(total_revenue == max(total_revenue))
# Display the highest revenue category and its revenue
print(highest_revenue_category)
total_revenue_by_category <- sales_data %>%
group_by(category) %>%
summarise(total_revenue = sum(revenue))
# load the data
sales_data=read.csv("sales_data.csv")
#Data exploration
library(dplyr)
#check the data structure
str(sales_data)
#summary statistics
summary(sales_data)
#check the missing values
summarize_all(sales_data,~sum(is.na(.)))
#remove rows with missing values
sales_data<-sales_data %>%
na.omit()
sales_data<-distinct(sales_data)
#check the clean data
summary(sales_data)
#calculate the total revenue
total_revenue <- sales_data %>% summarise(sum(revenue))
total_revenue
#calculate the revenue by group
total_revenue_by_product <- sales_data %>%
group_by(product) %>%
summarise(total_revenue_by_product = sum(revenue))
total_revenue_by_product
#Find the product with the highest revenue
highest_revenue <- total_revenue_by_product %>%
filter(total_revenue_by_product == max(total_revenue_by_product))
highest_revenue
#Find the product with the highest revenue
average_price <- sales_data %>%
summarise(average_price = mean(price))
average_price
#What was the total quantity of products sold by the company?
total_quantity_sold <- sales_data %>%
summarise(total_quantity_sold = sum(quantity))
total_quantity_sold
#Which category had the highest revenue? How much revenue did it generate?
total_revenue_by_category <- sales_data %>%
group_by(category) %>%
summarise(total_revenue = sum(revenue))
highest_revenue_category <- total_revenue_by_category %>%
filter(total_revenue == max(total_revenue))
print(highest_revenue_category)
#What was the average revenue per sale?
# load the data
sales_data=read.csv("sales_data.csv")
#Data exploration
library(dplyr)
#check the data structure
str(sales_data)
#summary statistics
summary(sales_data)
#check the missing values
summarize_all(sales_data,~sum(is.na(.)))
#remove rows with missing values
sales_data<-sales_data %>%
na.omit()
sales_data<-distinct(sales_data)
#check the clean data
summary(sales_data)
#calculate the total revenue
total_revenue <- sales_data %>% summarise(sum(revenue))
total_revenue
#calculate the revenue by group
total_revenue_by_product <- sales_data %>%
group_by(product) %>%
summarise(total_revenue_by_product = sum(revenue))
total_revenue_by_product
#Find the product with the highest revenue
highest_revenue <- total_revenue_by_product %>%
filter(total_revenue_by_product == max(total_revenue_by_product))
highest_revenue
#Find the product with the highest revenue
average_price <- sales_data %>%
summarise(average_price = mean(price))
average_price
#What was the total quantity of products sold by the company?
total_quantity_sold <- sales_data %>%
summarise(total_quantity_sold = sum(quantity))
total_quantity_sold
#Which category had the highest revenue? How much revenue did it generate?
total_revenue_by_category <- sales_data %>%
group_by(category) %>%
summarise(total_revenue = sum(revenue))
total_revenue_by_category
View(highest_revenue_category)
View(total_revenue_by_category)
# load the data
sales_data=read.csv("sales_data.csv")
#Data exploration
library(dplyr)
#check the data structure
str(sales_data)
#summary statistics
summary(sales_data)
#check the missing values
summarize_all(sales_data,~sum(is.na(.)))
#remove rows with missing values
sales_data<-sales_data %>%
na.omit()
sales_data<-distinct(sales_data)
#check the clean data
summary(sales_data)
#calculate the total revenue
total_revenue <- sales_data %>% summarise(sum(revenue))
total_revenue
#calculate the revenue by group
total_revenue_by_product <- sales_data %>%
group_by(product) %>%
summarise(total_revenue_by_product = sum(revenue))
total_revenue_by_product
#Find the product with the highest revenue
highest_revenue <- total_revenue_by_product %>%
filter(total_revenue_by_product == max(total_revenue_by_product))
highest_revenue
#Find the product with the highest revenue
average_price <- sales_data %>%
summarise(average_price = mean(price))
average_price
#What was the total quantity of products sold by the company?
total_quantity_sold <- sales_data %>%
summarise(total_quantity_sold = sum(quantity))
total_quantity_sold
#Which category had the highest revenue? How much revenue did it generate?
total_revenue_by_category <- sales_data %>%
group_by(category) %>%
summarise(total_revenue = sum(revenue))
total_revenue_by_category
highest_revenue_category <- total_revenue_by_category %>%
filter(total_revenue == max(total_revenue))
print(highest_revenue_category)
#What was the average revenue per sale?
total_revenue
highest_revenue
print(highest_revenue_category)
vector <- c(1,2,3,4)
vector[2]
a<-1:10
b<- seq(1,10)
runif(1)
set.seed(123)
runif(1)
a<-1:10
b<- seq(1,10)
highest_revenue
matrix(1:9, nrow=3, ncol=3)
total_revenue
